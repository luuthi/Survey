//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SurveyEntities : DbContext
    {
        public SurveyEntities()
            : base("name=SurveyEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<AccountGroup> AccountGroups { get; set; }
        public virtual DbSet<AnswerPaper> AnswerPapers { get; set; }
        public virtual DbSet<Answer> Answers { get; set; }
        public virtual DbSet<Choice> Choices { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<QuestionGroup> QuestionGroups { get; set; }
        public virtual DbSet<QuestionType> QuestionTypes { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RolesDetail> RolesDetails { get; set; }
        public virtual DbSet<SurveyInfo> SurveyInfoes { get; set; }
        public virtual DbSet<SurveyType> SurveyTypes { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Token> Tokens { get; set; }
    
        public virtual int AccountDelete(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccountDelete", usernameParameter);
        }
    
        public virtual int AccountGroupDelete(string groupID)
        {
            var groupIDParameter = groupID != null ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccountGroupDelete", groupIDParameter);
        }
    
        public virtual int AccountGroupInsert(string groupID, string groupName, string descriptions)
        {
            var groupIDParameter = groupID != null ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(string));
    
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var descriptionsParameter = descriptions != null ?
                new ObjectParameter("Descriptions", descriptions) :
                new ObjectParameter("Descriptions", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccountGroupInsert", groupIDParameter, groupNameParameter, descriptionsParameter);
        }
    
        public virtual ObjectResult<AccountGroupSelectAll_Result> AccountGroupSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountGroupSelectAll_Result>("AccountGroupSelectAll");
        }
    
        public virtual ObjectResult<AccountGroupSelectByID_Result> AccountGroupSelectByID(string groupID)
        {
            var groupIDParameter = groupID != null ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountGroupSelectByID_Result>("AccountGroupSelectByID", groupIDParameter);
        }
    
        public virtual int AccountGroupUpDate(string groupID, string groupName, string descriptions)
        {
            var groupIDParameter = groupID != null ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(string));
    
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var descriptionsParameter = descriptions != null ?
                new ObjectParameter("Descriptions", descriptions) :
                new ObjectParameter("Descriptions", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccountGroupUpDate", groupIDParameter, groupNameParameter, descriptionsParameter);
        }
    
        public virtual int AccountInsert(string username, string groupID, string passwords, string firstName, string lastName, Nullable<System.DateTime> birthday, Nullable<bool> gender, string mail, byte[] avatar, Nullable<bool> status)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var groupIDParameter = groupID != null ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(string));
    
            var passwordsParameter = passwords != null ?
                new ObjectParameter("Passwords", passwords) :
                new ObjectParameter("Passwords", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(bool));
    
            var mailParameter = mail != null ?
                new ObjectParameter("Mail", mail) :
                new ObjectParameter("Mail", typeof(string));
    
            var avatarParameter = avatar != null ?
                new ObjectParameter("Avatar", avatar) :
                new ObjectParameter("Avatar", typeof(byte[]));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccountInsert", usernameParameter, groupIDParameter, passwordsParameter, firstNameParameter, lastNameParameter, birthdayParameter, genderParameter, mailParameter, avatarParameter, statusParameter);
        }
    
        public virtual ObjectResult<AccountSelectAll_Result> AccountSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountSelectAll_Result>("AccountSelectAll");
        }
    
        public virtual ObjectResult<AccountSelectByID_Result> AccountSelectByID(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountSelectByID_Result>("AccountSelectByID", usernameParameter);
        }
    
        public virtual int AccountUpDate(string username, string groupID, string passwords, string firstName, string lastName, Nullable<System.DateTime> birthday, Nullable<bool> gender, string mail, string avatar, Nullable<bool> status)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var groupIDParameter = groupID != null ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(string));
    
            var passwordsParameter = passwords != null ?
                new ObjectParameter("Passwords", passwords) :
                new ObjectParameter("Passwords", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(bool));
    
            var mailParameter = mail != null ?
                new ObjectParameter("Mail", mail) :
                new ObjectParameter("Mail", typeof(string));
    
            var avatarParameter = avatar != null ?
                new ObjectParameter("Avatar", avatar) :
                new ObjectParameter("Avatar", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccountUpDate", usernameParameter, groupIDParameter, passwordsParameter, firstNameParameter, lastNameParameter, birthdayParameter, genderParameter, mailParameter, avatarParameter, statusParameter);
        }
    
        public virtual int AnswerPaperDelete(Nullable<System.Guid> idAnsPaper)
        {
            var idAnsPaperParameter = idAnsPaper.HasValue ?
                new ObjectParameter("IdAnsPaper", idAnsPaper) :
                new ObjectParameter("IdAnsPaper", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AnswerPaperDelete", idAnsPaperParameter);
        }
    
        public virtual int AnswerPaperInsert(Nullable<System.Guid> idAnsPaper, Nullable<System.DateTime> createdDate, Nullable<System.Guid> idSurvey, string descriptions, Nullable<bool> status)
        {
            var idAnsPaperParameter = idAnsPaper.HasValue ?
                new ObjectParameter("IdAnsPaper", idAnsPaper) :
                new ObjectParameter("IdAnsPaper", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var idSurveyParameter = idSurvey.HasValue ?
                new ObjectParameter("IdSurvey", idSurvey) :
                new ObjectParameter("IdSurvey", typeof(System.Guid));
    
            var descriptionsParameter = descriptions != null ?
                new ObjectParameter("Descriptions", descriptions) :
                new ObjectParameter("Descriptions", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AnswerPaperInsert", idAnsPaperParameter, createdDateParameter, idSurveyParameter, descriptionsParameter, statusParameter);
        }
    
        public virtual ObjectResult<AnswerPaperSelectAll_Result> AnswerPaperSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AnswerPaperSelectAll_Result>("AnswerPaperSelectAll");
        }
    
        public virtual ObjectResult<AnswerPaperSelectByID_Result> AnswerPaperSelectByID(Nullable<System.Guid> idAnsPaper)
        {
            var idAnsPaperParameter = idAnsPaper.HasValue ?
                new ObjectParameter("IdAnsPaper", idAnsPaper) :
                new ObjectParameter("IdAnsPaper", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AnswerPaperSelectByID_Result>("AnswerPaperSelectByID", idAnsPaperParameter);
        }
    
        public virtual int AnswerPaperUpDate(Nullable<System.Guid> idAnsPaper, Nullable<System.DateTime> createdDate, Nullable<System.Guid> idSurvey, string descriptions, Nullable<bool> status)
        {
            var idAnsPaperParameter = idAnsPaper.HasValue ?
                new ObjectParameter("IdAnsPaper", idAnsPaper) :
                new ObjectParameter("IdAnsPaper", typeof(System.Guid));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var idSurveyParameter = idSurvey.HasValue ?
                new ObjectParameter("IdSurvey", idSurvey) :
                new ObjectParameter("IdSurvey", typeof(System.Guid));
    
            var descriptionsParameter = descriptions != null ?
                new ObjectParameter("Descriptions", descriptions) :
                new ObjectParameter("Descriptions", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AnswerPaperUpDate", idAnsPaperParameter, createdDateParameter, idSurveyParameter, descriptionsParameter, statusParameter);
        }
    
        public virtual int AnswersDelete(Nullable<System.Guid> idAnswer)
        {
            var idAnswerParameter = idAnswer.HasValue ?
                new ObjectParameter("IdAnswer", idAnswer) :
                new ObjectParameter("IdAnswer", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AnswersDelete", idAnswerParameter);
        }
    
        public virtual int AnswersInsert(Nullable<System.Guid> idAnswer, Nullable<System.Guid> idAnsPaper, Nullable<System.Guid> idSolutions, Nullable<System.Guid> idQuestion)
        {
            var idAnswerParameter = idAnswer.HasValue ?
                new ObjectParameter("IdAnswer", idAnswer) :
                new ObjectParameter("IdAnswer", typeof(System.Guid));
    
            var idAnsPaperParameter = idAnsPaper.HasValue ?
                new ObjectParameter("IdAnsPaper", idAnsPaper) :
                new ObjectParameter("IdAnsPaper", typeof(System.Guid));
    
            var idSolutionsParameter = idSolutions.HasValue ?
                new ObjectParameter("IdSolutions", idSolutions) :
                new ObjectParameter("IdSolutions", typeof(System.Guid));
    
            var idQuestionParameter = idQuestion.HasValue ?
                new ObjectParameter("IdQuestion", idQuestion) :
                new ObjectParameter("IdQuestion", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AnswersInsert", idAnswerParameter, idAnsPaperParameter, idSolutionsParameter, idQuestionParameter);
        }
    
        public virtual ObjectResult<AnswersSelectAll_Result> AnswersSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AnswersSelectAll_Result>("AnswersSelectAll");
        }
    
        public virtual ObjectResult<AnswersSelectByID_Result> AnswersSelectByID(Nullable<System.Guid> idAnswer)
        {
            var idAnswerParameter = idAnswer.HasValue ?
                new ObjectParameter("IdAnswer", idAnswer) :
                new ObjectParameter("IdAnswer", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AnswersSelectByID_Result>("AnswersSelectByID", idAnswerParameter);
        }
    
        public virtual int AnswersUpDate(Nullable<System.Guid> idAnswer, Nullable<System.Guid> idAnsPaper, Nullable<System.Guid> idSolutions, Nullable<System.Guid> idQuestion)
        {
            var idAnswerParameter = idAnswer.HasValue ?
                new ObjectParameter("IdAnswer", idAnswer) :
                new ObjectParameter("IdAnswer", typeof(System.Guid));
    
            var idAnsPaperParameter = idAnsPaper.HasValue ?
                new ObjectParameter("IdAnsPaper", idAnsPaper) :
                new ObjectParameter("IdAnsPaper", typeof(System.Guid));
    
            var idSolutionsParameter = idSolutions.HasValue ?
                new ObjectParameter("IdSolutions", idSolutions) :
                new ObjectParameter("IdSolutions", typeof(System.Guid));
    
            var idQuestionParameter = idQuestion.HasValue ?
                new ObjectParameter("IdQuestion", idQuestion) :
                new ObjectParameter("IdQuestion", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AnswersUpDate", idAnswerParameter, idAnsPaperParameter, idSolutionsParameter, idQuestionParameter);
        }
    
        public virtual int ChoicesDelete(Nullable<System.Guid> idChoices)
        {
            var idChoicesParameter = idChoices.HasValue ?
                new ObjectParameter("IdChoices", idChoices) :
                new ObjectParameter("IdChoices", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChoicesDelete", idChoicesParameter);
        }
    
        public virtual int ChoicesInsert(Nullable<System.Guid> idChoices, Nullable<System.Guid> idQuestion, Nullable<int> numericalOrder, string content, Nullable<System.DateTime> lastEditedAt, string lastEditedBy)
        {
            var idChoicesParameter = idChoices.HasValue ?
                new ObjectParameter("IdChoices", idChoices) :
                new ObjectParameter("IdChoices", typeof(System.Guid));
    
            var idQuestionParameter = idQuestion.HasValue ?
                new ObjectParameter("IdQuestion", idQuestion) :
                new ObjectParameter("IdQuestion", typeof(System.Guid));
    
            var numericalOrderParameter = numericalOrder.HasValue ?
                new ObjectParameter("NumericalOrder", numericalOrder) :
                new ObjectParameter("NumericalOrder", typeof(int));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var lastEditedAtParameter = lastEditedAt.HasValue ?
                new ObjectParameter("LastEditedAt", lastEditedAt) :
                new ObjectParameter("LastEditedAt", typeof(System.DateTime));
    
            var lastEditedByParameter = lastEditedBy != null ?
                new ObjectParameter("LastEditedBy", lastEditedBy) :
                new ObjectParameter("LastEditedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChoicesInsert", idChoicesParameter, idQuestionParameter, numericalOrderParameter, contentParameter, lastEditedAtParameter, lastEditedByParameter);
        }
    
        public virtual ObjectResult<ChoicesSelectAll_Result> ChoicesSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ChoicesSelectAll_Result>("ChoicesSelectAll");
        }
    
        public virtual ObjectResult<ChoicesSelectByID_Result> ChoicesSelectByID(Nullable<System.Guid> idChoices)
        {
            var idChoicesParameter = idChoices.HasValue ?
                new ObjectParameter("IdChoices", idChoices) :
                new ObjectParameter("IdChoices", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ChoicesSelectByID_Result>("ChoicesSelectByID", idChoicesParameter);
        }
    
        public virtual int ChoicesUpDate(Nullable<System.Guid> idChoices, Nullable<System.Guid> idQuestion, Nullable<int> numericalOrder, string content, Nullable<System.DateTime> lastEditedAt, string lastEditedBy)
        {
            var idChoicesParameter = idChoices.HasValue ?
                new ObjectParameter("IdChoices", idChoices) :
                new ObjectParameter("IdChoices", typeof(System.Guid));
    
            var idQuestionParameter = idQuestion.HasValue ?
                new ObjectParameter("IdQuestion", idQuestion) :
                new ObjectParameter("IdQuestion", typeof(System.Guid));
    
            var numericalOrderParameter = numericalOrder.HasValue ?
                new ObjectParameter("NumericalOrder", numericalOrder) :
                new ObjectParameter("NumericalOrder", typeof(int));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var lastEditedAtParameter = lastEditedAt.HasValue ?
                new ObjectParameter("LastEditedAt", lastEditedAt) :
                new ObjectParameter("LastEditedAt", typeof(System.DateTime));
    
            var lastEditedByParameter = lastEditedBy != null ?
                new ObjectParameter("LastEditedBy", lastEditedBy) :
                new ObjectParameter("LastEditedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChoicesUpDate", idChoicesParameter, idQuestionParameter, numericalOrderParameter, contentParameter, lastEditedAtParameter, lastEditedByParameter);
        }
    
        public virtual int QuestionDelete(Nullable<System.Guid> idQuestion)
        {
            var idQuestionParameter = idQuestion.HasValue ?
                new ObjectParameter("IdQuestion", idQuestion) :
                new ObjectParameter("IdQuestion", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QuestionDelete", idQuestionParameter);
        }
    
        public virtual int QuestionGroupDelete(Nullable<System.Guid> idQuestionGroup)
        {
            var idQuestionGroupParameter = idQuestionGroup.HasValue ?
                new ObjectParameter("IdQuestionGroup", idQuestionGroup) :
                new ObjectParameter("IdQuestionGroup", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QuestionGroupDelete", idQuestionGroupParameter);
        }
    
        public virtual int QuestionGroupInsert(Nullable<System.Guid> idQuestionGroup, string content, Nullable<System.DateTime> lastEditedAt, string lastEditedBy)
        {
            var idQuestionGroupParameter = idQuestionGroup.HasValue ?
                new ObjectParameter("IdQuestionGroup", idQuestionGroup) :
                new ObjectParameter("IdQuestionGroup", typeof(System.Guid));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var lastEditedAtParameter = lastEditedAt.HasValue ?
                new ObjectParameter("LastEditedAt", lastEditedAt) :
                new ObjectParameter("LastEditedAt", typeof(System.DateTime));
    
            var lastEditedByParameter = lastEditedBy != null ?
                new ObjectParameter("LastEditedBy", lastEditedBy) :
                new ObjectParameter("LastEditedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QuestionGroupInsert", idQuestionGroupParameter, contentParameter, lastEditedAtParameter, lastEditedByParameter);
        }
    
        public virtual ObjectResult<QuestionGroupSelectAll_Result> QuestionGroupSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QuestionGroupSelectAll_Result>("QuestionGroupSelectAll");
        }
    
        public virtual ObjectResult<QuestionGroupSelectByID_Result> QuestionGroupSelectByID(Nullable<System.Guid> idQuestionGroup)
        {
            var idQuestionGroupParameter = idQuestionGroup.HasValue ?
                new ObjectParameter("IdQuestionGroup", idQuestionGroup) :
                new ObjectParameter("IdQuestionGroup", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QuestionGroupSelectByID_Result>("QuestionGroupSelectByID", idQuestionGroupParameter);
        }
    
        public virtual int QuestionGroupUpDate(Nullable<System.Guid> idQuestionGroup, string content, Nullable<System.DateTime> lastEditedAt, string lastEditedBy)
        {
            var idQuestionGroupParameter = idQuestionGroup.HasValue ?
                new ObjectParameter("IdQuestionGroup", idQuestionGroup) :
                new ObjectParameter("IdQuestionGroup", typeof(System.Guid));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var lastEditedAtParameter = lastEditedAt.HasValue ?
                new ObjectParameter("LastEditedAt", lastEditedAt) :
                new ObjectParameter("LastEditedAt", typeof(System.DateTime));
    
            var lastEditedByParameter = lastEditedBy != null ?
                new ObjectParameter("LastEditedBy", lastEditedBy) :
                new ObjectParameter("LastEditedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QuestionGroupUpDate", idQuestionGroupParameter, contentParameter, lastEditedAtParameter, lastEditedByParameter);
        }
    
        public virtual int QuestionInsert(Nullable<System.Guid> idQuestion, Nullable<System.Guid> idQuestionGroup, Nullable<int> numericalOrder, Nullable<System.Guid> idSurvey, Nullable<System.Guid> idQuesType, string content, string images, Nullable<bool> isRequired, Nullable<bool> status, Nullable<System.DateTime> lastEditedAt, string lastEditedBy)
        {
            var idQuestionParameter = idQuestion.HasValue ?
                new ObjectParameter("IdQuestion", idQuestion) :
                new ObjectParameter("IdQuestion", typeof(System.Guid));
    
            var idQuestionGroupParameter = idQuestionGroup.HasValue ?
                new ObjectParameter("IdQuestionGroup", idQuestionGroup) :
                new ObjectParameter("IdQuestionGroup", typeof(System.Guid));
    
            var numericalOrderParameter = numericalOrder.HasValue ?
                new ObjectParameter("NumericalOrder", numericalOrder) :
                new ObjectParameter("NumericalOrder", typeof(int));
    
            var idSurveyParameter = idSurvey.HasValue ?
                new ObjectParameter("IdSurvey", idSurvey) :
                new ObjectParameter("IdSurvey", typeof(System.Guid));
    
            var idQuesTypeParameter = idQuesType.HasValue ?
                new ObjectParameter("IdQuesType", idQuesType) :
                new ObjectParameter("IdQuesType", typeof(System.Guid));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var imagesParameter = images != null ?
                new ObjectParameter("Images", images) :
                new ObjectParameter("Images", typeof(string));
    
            var isRequiredParameter = isRequired.HasValue ?
                new ObjectParameter("IsRequired", isRequired) :
                new ObjectParameter("IsRequired", typeof(bool));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var lastEditedAtParameter = lastEditedAt.HasValue ?
                new ObjectParameter("LastEditedAt", lastEditedAt) :
                new ObjectParameter("LastEditedAt", typeof(System.DateTime));
    
            var lastEditedByParameter = lastEditedBy != null ?
                new ObjectParameter("LastEditedBy", lastEditedBy) :
                new ObjectParameter("LastEditedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QuestionInsert", idQuestionParameter, idQuestionGroupParameter, numericalOrderParameter, idSurveyParameter, idQuesTypeParameter, contentParameter, imagesParameter, isRequiredParameter, statusParameter, lastEditedAtParameter, lastEditedByParameter);
        }
    
        public virtual ObjectResult<QuestionSelectAll_Result> QuestionSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QuestionSelectAll_Result>("QuestionSelectAll");
        }
    
        public virtual ObjectResult<QuestionSelectByID_Result> QuestionSelectByID(Nullable<System.Guid> idQuestion)
        {
            var idQuestionParameter = idQuestion.HasValue ?
                new ObjectParameter("IdQuestion", idQuestion) :
                new ObjectParameter("IdQuestion", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QuestionSelectByID_Result>("QuestionSelectByID", idQuestionParameter);
        }
    
        public virtual int QuestionTypeDelete(Nullable<System.Guid> idQuesType)
        {
            var idQuesTypeParameter = idQuesType.HasValue ?
                new ObjectParameter("IdQuesType", idQuesType) :
                new ObjectParameter("IdQuesType", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QuestionTypeDelete", idQuesTypeParameter);
        }
    
        public virtual int QuestionTypeInsert(Nullable<System.Guid> idQuesType, string typeName, Nullable<bool> status, Nullable<System.DateTime> lastEditedAt, string lastEditedBy)
        {
            var idQuesTypeParameter = idQuesType.HasValue ?
                new ObjectParameter("IdQuesType", idQuesType) :
                new ObjectParameter("IdQuesType", typeof(System.Guid));
    
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var lastEditedAtParameter = lastEditedAt.HasValue ?
                new ObjectParameter("LastEditedAt", lastEditedAt) :
                new ObjectParameter("LastEditedAt", typeof(System.DateTime));
    
            var lastEditedByParameter = lastEditedBy != null ?
                new ObjectParameter("LastEditedBy", lastEditedBy) :
                new ObjectParameter("LastEditedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QuestionTypeInsert", idQuesTypeParameter, typeNameParameter, statusParameter, lastEditedAtParameter, lastEditedByParameter);
        }
    
        public virtual ObjectResult<QuestionTypeSelectAll_Result> QuestionTypeSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QuestionTypeSelectAll_Result>("QuestionTypeSelectAll");
        }
    
        public virtual ObjectResult<QuestionTypeSelectByID_Result> QuestionTypeSelectByID(Nullable<System.Guid> idQuesType)
        {
            var idQuesTypeParameter = idQuesType.HasValue ?
                new ObjectParameter("IdQuesType", idQuesType) :
                new ObjectParameter("IdQuesType", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QuestionTypeSelectByID_Result>("QuestionTypeSelectByID", idQuesTypeParameter);
        }
    
        public virtual int QuestionTypeUpDate(Nullable<System.Guid> idQuesType, string typeName, Nullable<bool> status, Nullable<System.DateTime> lastEditedAt, string lastEditedBy)
        {
            var idQuesTypeParameter = idQuesType.HasValue ?
                new ObjectParameter("IdQuesType", idQuesType) :
                new ObjectParameter("IdQuesType", typeof(System.Guid));
    
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var lastEditedAtParameter = lastEditedAt.HasValue ?
                new ObjectParameter("LastEditedAt", lastEditedAt) :
                new ObjectParameter("LastEditedAt", typeof(System.DateTime));
    
            var lastEditedByParameter = lastEditedBy != null ?
                new ObjectParameter("LastEditedBy", lastEditedBy) :
                new ObjectParameter("LastEditedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QuestionTypeUpDate", idQuesTypeParameter, typeNameParameter, statusParameter, lastEditedAtParameter, lastEditedByParameter);
        }
    
        public virtual int QuestionUpDate(Nullable<System.Guid> idQuestion, Nullable<System.Guid> idQuestionGroup, Nullable<int> numericalOrder, Nullable<System.Guid> idSurvey, Nullable<System.Guid> idQuesType, string content, string images, Nullable<bool> isRequired, Nullable<bool> status, Nullable<System.DateTime> lastEditedAt, string lastEditedBy)
        {
            var idQuestionParameter = idQuestion.HasValue ?
                new ObjectParameter("IdQuestion", idQuestion) :
                new ObjectParameter("IdQuestion", typeof(System.Guid));
    
            var idQuestionGroupParameter = idQuestionGroup.HasValue ?
                new ObjectParameter("IdQuestionGroup", idQuestionGroup) :
                new ObjectParameter("IdQuestionGroup", typeof(System.Guid));
    
            var numericalOrderParameter = numericalOrder.HasValue ?
                new ObjectParameter("NumericalOrder", numericalOrder) :
                new ObjectParameter("NumericalOrder", typeof(int));
    
            var idSurveyParameter = idSurvey.HasValue ?
                new ObjectParameter("IdSurvey", idSurvey) :
                new ObjectParameter("IdSurvey", typeof(System.Guid));
    
            var idQuesTypeParameter = idQuesType.HasValue ?
                new ObjectParameter("IdQuesType", idQuesType) :
                new ObjectParameter("IdQuesType", typeof(System.Guid));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var imagesParameter = images != null ?
                new ObjectParameter("Images", images) :
                new ObjectParameter("Images", typeof(string));
    
            var isRequiredParameter = isRequired.HasValue ?
                new ObjectParameter("IsRequired", isRequired) :
                new ObjectParameter("IsRequired", typeof(bool));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var lastEditedAtParameter = lastEditedAt.HasValue ?
                new ObjectParameter("LastEditedAt", lastEditedAt) :
                new ObjectParameter("LastEditedAt", typeof(System.DateTime));
    
            var lastEditedByParameter = lastEditedBy != null ?
                new ObjectParameter("LastEditedBy", lastEditedBy) :
                new ObjectParameter("LastEditedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QuestionUpDate", idQuestionParameter, idQuestionGroupParameter, numericalOrderParameter, idSurveyParameter, idQuesTypeParameter, contentParameter, imagesParameter, isRequiredParameter, statusParameter, lastEditedAtParameter, lastEditedByParameter);
        }
    
        public virtual int RolesDelete(string roleID)
        {
            var roleIDParameter = roleID != null ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RolesDelete", roleIDParameter);
        }
    
        public virtual int RolesDetailDelete(string roleDetailID)
        {
            var roleDetailIDParameter = roleDetailID != null ?
                new ObjectParameter("RoleDetailID", roleDetailID) :
                new ObjectParameter("RoleDetailID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RolesDetailDelete", roleDetailIDParameter);
        }
    
        public virtual int RolesDetailInsert(string roleDetailID, string roleID, string groupID, Nullable<bool> view_, Nullable<bool> add_, Nullable<bool> update_, Nullable<bool> delete_)
        {
            var roleDetailIDParameter = roleDetailID != null ?
                new ObjectParameter("RoleDetailID", roleDetailID) :
                new ObjectParameter("RoleDetailID", typeof(string));
    
            var roleIDParameter = roleID != null ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(string));
    
            var groupIDParameter = groupID != null ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(string));
    
            var view_Parameter = view_.HasValue ?
                new ObjectParameter("View_", view_) :
                new ObjectParameter("View_", typeof(bool));
    
            var add_Parameter = add_.HasValue ?
                new ObjectParameter("Add_", add_) :
                new ObjectParameter("Add_", typeof(bool));
    
            var update_Parameter = update_.HasValue ?
                new ObjectParameter("Update_", update_) :
                new ObjectParameter("Update_", typeof(bool));
    
            var delete_Parameter = delete_.HasValue ?
                new ObjectParameter("Delete_", delete_) :
                new ObjectParameter("Delete_", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RolesDetailInsert", roleDetailIDParameter, roleIDParameter, groupIDParameter, view_Parameter, add_Parameter, update_Parameter, delete_Parameter);
        }
    
        public virtual ObjectResult<RolesDetailSelectAll_Result> RolesDetailSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RolesDetailSelectAll_Result>("RolesDetailSelectAll");
        }
    
        public virtual ObjectResult<RolesDetailSelectByID_Result> RolesDetailSelectByID(string roleDetailID)
        {
            var roleDetailIDParameter = roleDetailID != null ?
                new ObjectParameter("RoleDetailID", roleDetailID) :
                new ObjectParameter("RoleDetailID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RolesDetailSelectByID_Result>("RolesDetailSelectByID", roleDetailIDParameter);
        }
    
        public virtual int RolesDetailUpDate(string roleDetailID, string roleID, string groupID, Nullable<bool> view_, Nullable<bool> add_, Nullable<bool> update_, Nullable<bool> delete_)
        {
            var roleDetailIDParameter = roleDetailID != null ?
                new ObjectParameter("RoleDetailID", roleDetailID) :
                new ObjectParameter("RoleDetailID", typeof(string));
    
            var roleIDParameter = roleID != null ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(string));
    
            var groupIDParameter = groupID != null ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(string));
    
            var view_Parameter = view_.HasValue ?
                new ObjectParameter("View_", view_) :
                new ObjectParameter("View_", typeof(bool));
    
            var add_Parameter = add_.HasValue ?
                new ObjectParameter("Add_", add_) :
                new ObjectParameter("Add_", typeof(bool));
    
            var update_Parameter = update_.HasValue ?
                new ObjectParameter("Update_", update_) :
                new ObjectParameter("Update_", typeof(bool));
    
            var delete_Parameter = delete_.HasValue ?
                new ObjectParameter("Delete_", delete_) :
                new ObjectParameter("Delete_", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RolesDetailUpDate", roleDetailIDParameter, roleIDParameter, groupIDParameter, view_Parameter, add_Parameter, update_Parameter, delete_Parameter);
        }
    
        public virtual int RolesInsert(string roleID, string roleName, Nullable<bool> status)
        {
            var roleIDParameter = roleID != null ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RolesInsert", roleIDParameter, roleNameParameter, statusParameter);
        }
    
        public virtual ObjectResult<RolesSelectAll_Result> RolesSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RolesSelectAll_Result>("RolesSelectAll");
        }
    
        public virtual ObjectResult<RolesSelectByID_Result> RolesSelectByID(string roleID)
        {
            var roleIDParameter = roleID != null ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RolesSelectByID_Result>("RolesSelectByID", roleIDParameter);
        }
    
        public virtual int RolesUpDate(string roleID, string roleName, Nullable<bool> status)
        {
            var roleIDParameter = roleID != null ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RolesUpDate", roleIDParameter, roleNameParameter, statusParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int SurveyInfoDelete(Nullable<System.Guid> idSurvey)
        {
            var idSurveyParameter = idSurvey.HasValue ?
                new ObjectParameter("IdSurvey", idSurvey) :
                new ObjectParameter("IdSurvey", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SurveyInfoDelete", idSurveyParameter);
        }
    
        public virtual int SurveyInfoInsert(Nullable<System.Guid> idSurvey, Nullable<System.Guid> idSurType, string surveyName, string descriptions, string images, Nullable<bool> status, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> lastEditedAt, string lastEditedBy, string ownedUserID)
        {
            var idSurveyParameter = idSurvey.HasValue ?
                new ObjectParameter("IdSurvey", idSurvey) :
                new ObjectParameter("IdSurvey", typeof(System.Guid));
    
            var idSurTypeParameter = idSurType.HasValue ?
                new ObjectParameter("IdSurType", idSurType) :
                new ObjectParameter("IdSurType", typeof(System.Guid));
    
            var surveyNameParameter = surveyName != null ?
                new ObjectParameter("SurveyName", surveyName) :
                new ObjectParameter("SurveyName", typeof(string));
    
            var descriptionsParameter = descriptions != null ?
                new ObjectParameter("Descriptions", descriptions) :
                new ObjectParameter("Descriptions", typeof(string));
    
            var imagesParameter = images != null ?
                new ObjectParameter("Images", images) :
                new ObjectParameter("Images", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var lastEditedAtParameter = lastEditedAt.HasValue ?
                new ObjectParameter("LastEditedAt", lastEditedAt) :
                new ObjectParameter("LastEditedAt", typeof(System.DateTime));
    
            var lastEditedByParameter = lastEditedBy != null ?
                new ObjectParameter("LastEditedBy", lastEditedBy) :
                new ObjectParameter("LastEditedBy", typeof(string));
    
            var ownedUserIDParameter = ownedUserID != null ?
                new ObjectParameter("OwnedUserID", ownedUserID) :
                new ObjectParameter("OwnedUserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SurveyInfoInsert", idSurveyParameter, idSurTypeParameter, surveyNameParameter, descriptionsParameter, imagesParameter, statusParameter, createdDateParameter, lastEditedAtParameter, lastEditedByParameter, ownedUserIDParameter);
        }
    
        public virtual ObjectResult<SurveyInfoSelectAll_Result> SurveyInfoSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SurveyInfoSelectAll_Result>("SurveyInfoSelectAll");
        }
    
        public virtual ObjectResult<SurveyInfoSelectByID_Result> SurveyInfoSelectByID(Nullable<System.Guid> idSurvey)
        {
            var idSurveyParameter = idSurvey.HasValue ?
                new ObjectParameter("IdSurvey", idSurvey) :
                new ObjectParameter("IdSurvey", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SurveyInfoSelectByID_Result>("SurveyInfoSelectByID", idSurveyParameter);
        }
    
        public virtual int SurveyInfoUpDate(Nullable<System.Guid> idSurvey, Nullable<System.Guid> idSurType, string surveyName, string descriptions, string images, Nullable<bool> status, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> lastEditedAt, string lastEditedBy, string ownedUserID)
        {
            var idSurveyParameter = idSurvey.HasValue ?
                new ObjectParameter("IdSurvey", idSurvey) :
                new ObjectParameter("IdSurvey", typeof(System.Guid));
    
            var idSurTypeParameter = idSurType.HasValue ?
                new ObjectParameter("IdSurType", idSurType) :
                new ObjectParameter("IdSurType", typeof(System.Guid));
    
            var surveyNameParameter = surveyName != null ?
                new ObjectParameter("SurveyName", surveyName) :
                new ObjectParameter("SurveyName", typeof(string));
    
            var descriptionsParameter = descriptions != null ?
                new ObjectParameter("Descriptions", descriptions) :
                new ObjectParameter("Descriptions", typeof(string));
    
            var imagesParameter = images != null ?
                new ObjectParameter("Images", images) :
                new ObjectParameter("Images", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var lastEditedAtParameter = lastEditedAt.HasValue ?
                new ObjectParameter("LastEditedAt", lastEditedAt) :
                new ObjectParameter("LastEditedAt", typeof(System.DateTime));
    
            var lastEditedByParameter = lastEditedBy != null ?
                new ObjectParameter("LastEditedBy", lastEditedBy) :
                new ObjectParameter("LastEditedBy", typeof(string));
    
            var ownedUserIDParameter = ownedUserID != null ?
                new ObjectParameter("OwnedUserID", ownedUserID) :
                new ObjectParameter("OwnedUserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SurveyInfoUpDate", idSurveyParameter, idSurTypeParameter, surveyNameParameter, descriptionsParameter, imagesParameter, statusParameter, createdDateParameter, lastEditedAtParameter, lastEditedByParameter, ownedUserIDParameter);
        }
    
        public virtual int SurveyTypeDelete(Nullable<System.Guid> idSurType)
        {
            var idSurTypeParameter = idSurType.HasValue ?
                new ObjectParameter("IdSurType", idSurType) :
                new ObjectParameter("IdSurType", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SurveyTypeDelete", idSurTypeParameter);
        }
    
        public virtual int SurveyTypeInsert(Nullable<System.Guid> idSurType, string typeName, string descriptions, Nullable<System.DateTime> lastEditedAt, Nullable<bool> status)
        {
            var idSurTypeParameter = idSurType.HasValue ?
                new ObjectParameter("IdSurType", idSurType) :
                new ObjectParameter("IdSurType", typeof(System.Guid));
    
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            var descriptionsParameter = descriptions != null ?
                new ObjectParameter("Descriptions", descriptions) :
                new ObjectParameter("Descriptions", typeof(string));
    
            var lastEditedAtParameter = lastEditedAt.HasValue ?
                new ObjectParameter("LastEditedAt", lastEditedAt) :
                new ObjectParameter("LastEditedAt", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SurveyTypeInsert", idSurTypeParameter, typeNameParameter, descriptionsParameter, lastEditedAtParameter, statusParameter);
        }
    
        public virtual ObjectResult<SurveyTypeSelectAll_Result> SurveyTypeSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SurveyTypeSelectAll_Result>("SurveyTypeSelectAll");
        }
    
        public virtual ObjectResult<SurveyTypeSelectByID_Result> SurveyTypeSelectByID(Nullable<System.Guid> idSurType)
        {
            var idSurTypeParameter = idSurType.HasValue ?
                new ObjectParameter("IdSurType", idSurType) :
                new ObjectParameter("IdSurType", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SurveyTypeSelectByID_Result>("SurveyTypeSelectByID", idSurTypeParameter);
        }
    
        public virtual int SurveyTypeUpDate(Nullable<System.Guid> idSurType, string typeName, string descriptions, Nullable<System.DateTime> lastEditedAt, Nullable<bool> status)
        {
            var idSurTypeParameter = idSurType.HasValue ?
                new ObjectParameter("IdSurType", idSurType) :
                new ObjectParameter("IdSurType", typeof(System.Guid));
    
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            var descriptionsParameter = descriptions != null ?
                new ObjectParameter("Descriptions", descriptions) :
                new ObjectParameter("Descriptions", typeof(string));
    
            var lastEditedAtParameter = lastEditedAt.HasValue ?
                new ObjectParameter("LastEditedAt", lastEditedAt) :
                new ObjectParameter("LastEditedAt", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SurveyTypeUpDate", idSurTypeParameter, typeNameParameter, descriptionsParameter, lastEditedAtParameter, statusParameter);
        }
    }
}
